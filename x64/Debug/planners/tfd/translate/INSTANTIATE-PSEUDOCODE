Bestimme eine Überapproximation der erreichbaren Fakten
mithilfe der folgenden Regeln ("compute model"):

for each operator op = (par, pre, eff):
  pre.annotate_with_reachability_rules()
  reachable-op(par) :- pre.reachability_predicate
  for (condition, consequence) in eff:
    condition.annotate_with_reachability_rules()
    consequence :- reachable-op(par), condition.reachability_predicate

annotate_with_reachability_rules():

Für Conditions vom Typ Truth:
  reachability_predicate = Truth().

Für Conditions vom Typ Falsity:
  reachability_predicate = Falsity().

Für Conditions vom Typ Disjunction:
  reachability_predicate = new_predicate_name(self.free_variables)
  for each disjunct:
    reachability_predicate :- disjunct.reachability_predicate

Für Conditons vom Typ Conjunction:
  reachability_predicate = new_predicate_name(self.free_variables)
  reachability_predicate :- conjunct_1.reachability_predicate, ...,
                            conjunct_k.reachability_predicate

Für Conditions vom Typ Existential Quantification:
  reachability_predicate = new_predicate_name(self.free_variables)
  reachability_predicate :- quantified_expression.reachability_predicate

Für Conditions vom Typ Universal Quantification:
  reachability_predicate = Truth().

Für Conditions vom Typ Atom:
  reachability_predicate = atom.predicate(atom.args)

Für Conditions vom Typ NegatedAtom:
  reachability_predicate = Truth().


Instantiierung eines Operators:

Instantiiere die Vorbedingung mit den Variablen des reachable-op-Fakts.
Instantiiere jeden Effekt mit den Variablen des reachable-op-Fakts.

Für universell quantifizierte Effekte, gehe alle typkorrekten Belegungen der
quantifizierten Variablen durch.

Für konditionale Effekte, instantiiere die Bedingungen genauso wie die
Vorbedingung.

Für Conditions vom Typ Truth:
  return Truth()

Für Conditions vom Typ Falsity:
  return Falsity()

Für Conditions vom Typ Disjunction:
  return (or <disjunct instantiations(var_assignment)>)

Für Conditions vom Typ Conjunction:
  return (and <conjunct instantiations(var_assignment)>)

Für Conditions vom Typ Existential Quantification:
  Bestimme die zu var_assignment passenden Belegungen <assigns> der
  existenzquantifizierten Variablen, für die der quantifizierte Ausdruck
  erreichbar ist.

  return (or <part_instantiation(var_assignment + assig) for assig in assigs>)

Für Conditions vom Typ Universal Quantification:
  Bestimme alle typkorrekten Belegungen <assigns> der quantifizierten
  Variablen.

  return (and <part_instantiation(var_assignment + assig) for assig in assigs>)

Für Conditions vom Typ Atom:
  Überprüfe, ob das Atom erreichbar ist. Falls nein,
    return Falsity()
  Überprüfe, ob das Prädikat statisch ist. Falls ja,
    return Truth()
  Ansonsten:
    return Atom(...)

Für Conditions vom Typ NegatedAtom:
  Überprüfe, ob das Prädikat statisch ist.
  Falls ja:
    überprüfe, ob das zugehörige positive Atom erreichbar ist.
    Falls ja:   return Falsity()
    Falls nein: return Truth()
  Ansonsten:
    return NegatedAtom(...)

